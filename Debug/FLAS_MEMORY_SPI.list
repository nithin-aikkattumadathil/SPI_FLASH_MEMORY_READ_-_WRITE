
FLAS_MEMORY_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f00  08002f00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000010  08002f18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002f18  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063db  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001441  00000000  00000000  00026413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00027858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e7a  00000000  00000000  00028518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b91  00000000  00000000  0003b392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073ae9  00000000  00000000  00042f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016dc  00000000  00000000  000b6a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e84 	.word	0x08002e84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002e84 	.word	0x08002e84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fddc 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f88a 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f914 	bl	80006e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b8:	f000 f8da 	bl	8000670 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SectorNum = 1;
 80004bc:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <main+0x10c>)
 80004be:	2201      	movs	r2, #1
 80004c0:	701a      	strb	r2, [r3, #0]
  W25qxx_Init(); //function insitetited
 80004c2:	f000 fb13 	bl	8000aec <W25qxx_Init>

  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 80004c6:	23a0      	movs	r3, #160	; 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2200      	movs	r2, #0
 80004cc:	2104      	movs	r1, #4
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 f8a5 	bl	800161e <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

	      // WriteSector of w25qxx spi flash memory
	      W25qxx_WriteSector(Write_Buf, SectorNum, offsetByte, MAX_DATA_SIZE); // Indicate the sector and offset for the write operation
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <main+0x10c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	0019      	movs	r1, r3
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <main+0x110>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	001a      	movs	r2, r3
 80004e0:	4836      	ldr	r0, [pc, #216]	; (80005bc <main+0x114>)
 80004e2:	2303      	movs	r3, #3
 80004e4:	f000 fc54 	bl	8000d90 <W25qxx_WriteSector>
	      W25qxx_ReadSector(Read_Buf, SectorNum, offsetByte, MAX_DATA_SIZE); // Read the sector to validate the write operation
 80004e8:	4b32      	ldr	r3, [pc, #200]	; (80005b4 <main+0x10c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	0019      	movs	r1, r3
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <main+0x110>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	001a      	movs	r2, r3
 80004f4:	4832      	ldr	r0, [pc, #200]	; (80005c0 <main+0x118>)
 80004f6:	2303      	movs	r3, #3
 80004f8:	f000 fd28 	bl	8000f4c <W25qxx_ReadSector>
	      HAL_Delay(1000); // Delay 0.5 seconds
 80004fc:	23fa      	movs	r3, #250	; 0xfa
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fe21 	bl	8001148 <HAL_Delay>

	    if (HAL_GPIO_ReadPin(GPIOA, PUSH_BUTTON2_Pin) == GPIO_PIN_RESET) { // Button2 is pressed, turn OFF the LED
 8000506:	23a0      	movs	r3, #160	; 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2102      	movs	r1, #2
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f869 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d110      	bne.n	8000538 <main+0x90>
	        HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET); // Turn OFF the LED
 8000516:	23a0      	movs	r3, #160	; 0xa0
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	2200      	movs	r2, #0
 800051c:	2104      	movs	r1, #4
 800051e:	0018      	movs	r0, r3
 8000520:	f001 f87d 	bl	800161e <HAL_GPIO_WritePin>
	        ledStatus = 0; // Update the LED status variable
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <main+0x11c>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	        Write_Buf[2] &= 0xFE; // Modify the value in Write_Buf[2] to clear the third bit
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <main+0x114>)
 800052c:	789b      	ldrb	r3, [r3, #2]
 800052e:	2201      	movs	r2, #1
 8000530:	4393      	bics	r3, r2
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b21      	ldr	r3, [pc, #132]	; (80005bc <main+0x114>)
 8000536:	709a      	strb	r2, [r3, #2]
	      }

	      if (HAL_GPIO_ReadPin(GPIOA, PUSH_BUTTON1_Pin) == GPIO_PIN_RESET) { // Button1 is pressed, turn ON the LED
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2101      	movs	r1, #1
 800053e:	0018      	movs	r0, r3
 8000540:	f001 f850 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d110      	bne.n	800056a <main+0xc2>
	        HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET); // Turn ON the LED
 8000548:	23a0      	movs	r3, #160	; 0xa0
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2201      	movs	r2, #1
 800054e:	2104      	movs	r1, #4
 8000550:	0018      	movs	r0, r3
 8000552:	f001 f864 	bl	800161e <HAL_GPIO_WritePin>
	        ledStatus = 1; // Update the LED status variable
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <main+0x11c>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
	        Write_Buf[2] |= 0x01; // Modify the value in Write_Buf[2] to set the third bit
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <main+0x114>)
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	2201      	movs	r2, #1
 8000562:	4313      	orrs	r3, r2
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <main+0x114>)
 8000568:	709a      	strb	r2, [r3, #2]
	      }


	      // ReadSector of the W25qxx spi flash memory
	      W25qxx_ReadSector(Read_Buf, SectorNum, offsetByte, MAX_DATA_SIZE); // Read the sector after modifying the LED status
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <main+0x10c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	0019      	movs	r1, r3
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <main+0x110>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	001a      	movs	r2, r3
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <main+0x118>)
 8000578:	2303      	movs	r3, #3
 800057a:	f000 fce7 	bl	8000f4c <W25qxx_ReadSector>

	      HAL_Delay(1000); // Delay 0.5 seconds
 800057e:	23fa      	movs	r3, #250	; 0xfa
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fde0 	bl	8001148 <HAL_Delay>

	      if (memcmp(Write_Buf, Read_Buf, MAX_DATA_SIZE) == 0) {
 8000588:	490d      	ldr	r1, [pc, #52]	; (80005c0 <main+0x118>)
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <main+0x114>)
 800058c:	2203      	movs	r2, #3
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fc62 	bl	8002e58 <memcmp>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d105      	bne.n	80005a4 <main+0xfc>
	        offsetByte += MAX_DATA_SIZE; // Increment the offsetByte if the write operation is successful
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <main+0x110>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	3303      	adds	r3, #3
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <main+0x110>)
 80005a2:	801a      	strh	r2, [r3, #0]
	      }

	      SectorNum++; // Increment to move to the next sector
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <main+0x10c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <main+0x10c>)
 80005ae:	701a      	strb	r2, [r3, #0]
	      W25qxx_WriteSector(Write_Buf, SectorNum, offsetByte, MAX_DATA_SIZE); // Indicate the sector and offset for the write operation
 80005b0:	e790      	b.n	80004d4 <main+0x2c>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	20000087 	.word	0x20000087
 80005b8:	20000088 	.word	0x20000088
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000084 	.word	0x20000084
 80005c4:	2000008a 	.word	0x2000008a

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b095      	sub	sp, #84	; 0x54
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	2418      	movs	r4, #24
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2338      	movs	r3, #56	; 0x38
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f002 fc4b 	bl	8002e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f002 fc44 	bl	8002e74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <SystemClock_Config+0xa0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1e      	ldr	r2, [pc, #120]	; (800066c <SystemClock_Config+0xa4>)
 80005f2:	401a      	ands	r2, r3
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <SystemClock_Config+0xa0>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0109      	lsls	r1, r1, #4
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fe:	0021      	movs	r1, r4
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2210      	movs	r2, #16
 8000604:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2201      	movs	r2, #1
 800060a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	22a0      	movs	r2, #160	; 0xa0
 8000616:	0212      	lsls	r2, r2, #8
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	187b      	adds	r3, r7, r1
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f818 	bl	8001658 <HAL_RCC_OscConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800062c:	f000 f8ac 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	220f      	movs	r2, #15
 8000634:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2100      	movs	r1, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fbc4 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800065c:	f000 f894 	bl	8000788 <Error_Handler>
  }
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b015      	add	sp, #84	; 0x54
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40007000 	.word	0x40007000
 800066c:	ffffe7ff 	.word	0xffffe7ff

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_SPI1_Init+0x68>)
 8000676:	4a19      	ldr	r2, [pc, #100]	; (80006dc <MX_SPI1_Init+0x6c>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_SPI1_Init+0x68>)
 800067c:	2282      	movs	r2, #130	; 0x82
 800067e:	0052      	lsls	r2, r2, #1
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_SPI1_Init+0x68>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_SPI1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_SPI1_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_SPI1_Init+0x68>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_SPI1_Init+0x68>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	0092      	lsls	r2, r2, #2
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_SPI1_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_SPI1_Init+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_SPI1_Init+0x68>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_SPI1_Init+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_SPI1_Init+0x68>)
 80006bc:	2207      	movs	r2, #7
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_SPI1_Init+0x68>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fd7a 	bl	80021bc <HAL_SPI_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f85c 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	240c      	movs	r4, #12
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2314      	movs	r3, #20
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f002 fbbf 	bl	8002e74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xa4>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_GPIO_Init+0xa4>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xa4>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xa4>)
 8000710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xa4>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xa4>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|FLASH_CS_Pin, GPIO_PIN_RESET);
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	2200      	movs	r2, #0
 800072c:	2114      	movs	r1, #20
 800072e:	0018      	movs	r0, r3
 8000730:	f000 ff75 	bl	800161e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	193a      	adds	r2, r7, r4
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fdd2 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 FLASH_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|FLASH_CS_Pin;
 8000754:	0021      	movs	r1, r4
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2214      	movs	r2, #20
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2201      	movs	r2, #1
 8000760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	187a      	adds	r2, r7, r1
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fdbe 	bl	80012f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b009      	add	sp, #36	; 0x24
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_MspInit+0x24>)
 800079a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x24>)
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <HAL_MspInit+0x24>)
 80007a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_MspInit+0x24>)
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	0549      	lsls	r1, r1, #21
 80007ae:	430a      	orrs	r2, r1
 80007b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	240c      	movs	r4, #12
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f002 fb50 	bl	8002e74 <memset>
  if(hspi->Instance==SPI1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <HAL_SPI_MspInit+0x80>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d129      	bne.n	8000832 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_SPI_MspInit+0x84>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_SPI_MspInit+0x84>)
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	0149      	lsls	r1, r1, #5
 80007e8:	430a      	orrs	r2, r1
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_SPI_MspInit+0x84>)
 80007ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_SPI_MspInit+0x84>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	430a      	orrs	r2, r1
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_SPI_MspInit+0x84>)
 80007fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fc:	2201      	movs	r2, #1
 80007fe:	4013      	ands	r3, r2
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	22e0      	movs	r2, #224	; 0xe0
 800080a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2202      	movs	r2, #2
 8000810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2203      	movs	r2, #3
 800081c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	187a      	adds	r2, r7, r1
 8000826:	23a0      	movs	r3, #160	; 0xa0
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fd63 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b009      	add	sp, #36	; 0x24
 8000838:	bd90      	pop	{r4, r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40013000 	.word	0x40013000
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 fc52 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b087      	sub	sp, #28
 8000880:	af02      	add	r7, sp, #8
 8000882:	0002      	movs	r2, r0
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	701a      	strb	r2, [r3, #0]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000888:	240f      	movs	r4, #15
 800088a:	193a      	adds	r2, r7, r4
 800088c:	1df9      	adds	r1, r7, #7
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <W25qxx_Spi+0x2c>)
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	f001 ffb1 	bl	80027fc <HAL_SPI_TransmitReceive>
	return ret;	
 800089a:	193b      	adds	r3, r7, r4
 800089c:	781b      	ldrb	r3, [r3, #0]
}
 800089e:	0018      	movs	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b005      	add	sp, #20
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	2000002c 	.word	0x2000002c

080008ac <W25qxx_ReadID>:
//###################################################################################################################
uint32_t tempID=0;
uint32_t W25qxx_ReadID(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	2110      	movs	r1, #16
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fea7 	bl	800161e <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F); 
 80008d0:	209f      	movs	r0, #159	; 0x9f
 80008d2:	f7ff ffd3 	bl	800087c <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80008d6:	20a5      	movs	r0, #165	; 0xa5
 80008d8:	f7ff ffd0 	bl	800087c <W25qxx_Spi>
 80008dc:	0003      	movs	r3, r0
 80008de:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80008e0:	20a5      	movs	r0, #165	; 0xa5
 80008e2:	f7ff ffcb 	bl	800087c <W25qxx_Spi>
 80008e6:	0003      	movs	r3, r0
 80008e8:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80008ea:	20a5      	movs	r0, #165	; 0xa5
 80008ec:	f7ff ffc6 	bl	800087c <W25qxx_Spi>
 80008f0:	0003      	movs	r3, r0
 80008f2:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fe8e 	bl	800161e <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	041a      	lsls	r2, r3, #16
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	4313      	orrs	r3, r2
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	4313      	orrs	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
	tempID = Temp;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <W25qxx_ReadID+0x78>)
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	601a      	str	r2, [r3, #0]
  return Temp;
 8000918:	68fb      	ldr	r3, [r7, #12]
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	200000b4 	.word	0x200000b4

08000928 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fe71 	bl	800161e <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 800093c:	204b      	movs	r0, #75	; 0x4b
 800093e:	f7ff ff9d 	bl	800087c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e007      	b.n	800095a <W25qxx_ReadUniqID+0x32>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800094a:	20a5      	movs	r0, #165	; 0xa5
 800094c:	f7ff ff96 	bl	800087c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	3201      	adds	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d9f3      	bls.n	800094a <W25qxx_ReadUniqID+0x22>
	for(uint8_t	i=0;i<8;i++)
 8000962:	1dbb      	adds	r3, r7, #6
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e00e      	b.n	8000988 <W25qxx_ReadUniqID+0x60>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800096a:	1dbb      	adds	r3, r7, #6
 800096c:	781c      	ldrb	r4, [r3, #0]
 800096e:	20a5      	movs	r0, #165	; 0xa5
 8000970:	f7ff ff84 	bl	800087c <W25qxx_Spi>
 8000974:	0003      	movs	r3, r0
 8000976:	001a      	movs	r2, r3
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <W25qxx_ReadUniqID+0x80>)
 800097a:	191b      	adds	r3, r3, r4
 800097c:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 800097e:	1dbb      	adds	r3, r7, #6
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	1dbb      	adds	r3, r7, #6
 8000984:	3201      	adds	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	1dbb      	adds	r3, r7, #6
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9ec      	bls.n	800096a <W25qxx_ReadUniqID+0x42>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2201      	movs	r2, #1
 8000996:	2110      	movs	r1, #16
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fe40 	bl	800161e <HAL_GPIO_WritePin>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b003      	add	sp, #12
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	2000008c 	.word	0x2000008c

080009ac <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fe30 	bl	800161e <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80009be:	2006      	movs	r0, #6
 80009c0:	f7ff ff5c 	bl	800087c <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80009c4:	23a0      	movs	r3, #160	; 0xa0
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	2201      	movs	r2, #1
 80009ca:	2110      	movs	r1, #16
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fe26 	bl	800161e <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 fbb8 	bl	8001148 <HAL_Delay>
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	0002      	movs	r2, r0
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	701a      	strb	r2, [r3, #0]
	uint8_t	status=0;
 80009ec:	240f      	movs	r4, #15
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	2200      	movs	r2, #0
 80009fa:	2110      	movs	r1, #16
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fe0e 	bl	800161e <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10f      	bne.n	8000a2a <W25qxx_ReadStatusRegister+0x4a>
	{
		W25qxx_Spi(0x05);
 8000a0a:	2005      	movs	r0, #5
 8000a0c:	f7ff ff36 	bl	800087c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a10:	0025      	movs	r5, r4
 8000a12:	193c      	adds	r4, r7, r4
 8000a14:	20a5      	movs	r0, #165	; 0xa5
 8000a16:	f7ff ff31 	bl	800087c <W25qxx_Spi>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <W25qxx_ReadStatusRegister+0xac>)
 8000a20:	197a      	adds	r2, r7, r5
 8000a22:	2124      	movs	r1, #36	; 0x24
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	545a      	strb	r2, [r3, r1]
 8000a28:	e022      	b.n	8000a70 <W25qxx_ReadStatusRegister+0x90>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d10f      	bne.n	8000a52 <W25qxx_ReadStatusRegister+0x72>
	{
		W25qxx_Spi(0x35);
 8000a32:	2035      	movs	r0, #53	; 0x35
 8000a34:	f7ff ff22 	bl	800087c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a38:	250f      	movs	r5, #15
 8000a3a:	197c      	adds	r4, r7, r5
 8000a3c:	20a5      	movs	r0, #165	; 0xa5
 8000a3e:	f7ff ff1d 	bl	800087c <W25qxx_Spi>
 8000a42:	0003      	movs	r3, r0
 8000a44:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <W25qxx_ReadStatusRegister+0xac>)
 8000a48:	197a      	adds	r2, r7, r5
 8000a4a:	2125      	movs	r1, #37	; 0x25
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	545a      	strb	r2, [r3, r1]
 8000a50:	e00e      	b.n	8000a70 <W25qxx_ReadStatusRegister+0x90>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000a52:	2015      	movs	r0, #21
 8000a54:	f7ff ff12 	bl	800087c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a58:	250f      	movs	r5, #15
 8000a5a:	197c      	adds	r4, r7, r5
 8000a5c:	20a5      	movs	r0, #165	; 0xa5
 8000a5e:	f7ff ff0d 	bl	800087c <W25qxx_Spi>
 8000a62:	0003      	movs	r3, r0
 8000a64:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <W25qxx_ReadStatusRegister+0xac>)
 8000a68:	197a      	adds	r2, r7, r5
 8000a6a:	2126      	movs	r1, #38	; 0x26
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	545a      	strb	r2, [r3, r1]
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2201      	movs	r2, #1
 8000a76:	2110      	movs	r1, #16
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fdd0 	bl	800161e <HAL_GPIO_WritePin>
	return status;
 8000a7e:	230f      	movs	r3, #15
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	781b      	ldrb	r3, [r3, #0]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b004      	add	sp, #16
 8000a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fb57 	bl	8001148 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a9a:	23a0      	movs	r3, #160	; 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fdbb 	bl	800161e <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f7ff fee7 	bl	800087c <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000aae:	20a5      	movs	r0, #165	; 0xa5
 8000ab0:	f7ff fee4 	bl	800087c <W25qxx_Spi>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <W25qxx_WaitForWriteEnd+0x58>)
 8000aba:	2224      	movs	r2, #36	; 0x24
 8000abc:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fb42 	bl	8001148 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <W25qxx_WaitForWriteEnd+0x58>)
 8000ac6:	2224      	movs	r2, #36	; 0x24
 8000ac8:	5c9b      	ldrb	r3, [r3, r2]
 8000aca:	001a      	movs	r2, r3
 8000acc:	2301      	movs	r3, #1
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d1ed      	bne.n	8000aae <W25qxx_WaitForWriteEnd+0x1e>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ad2:	23a0      	movs	r3, #160	; 0xa0
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2110      	movs	r1, #16
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fd9f 	bl	800161e <HAL_GPIO_WritePin>
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	2000008c 	.word	0x2000008c

08000aec <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;	
 8000af2:	4b59      	ldr	r3, [pc, #356]	; (8000c58 <W25qxx_Init+0x16c>)
 8000af4:	2227      	movs	r2, #39	; 0x27
 8000af6:	2101      	movs	r1, #1
 8000af8:	5499      	strb	r1, [r3, r2]
  while(HAL_GetTick()<100)
 8000afa:	e002      	b.n	8000b02 <W25qxx_Init+0x16>
    W25qxx_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 fb23 	bl	8001148 <HAL_Delay>
  while(HAL_GetTick()<100)
 8000b02:	f000 fb17 	bl	8001134 <HAL_GetTick>
 8000b06:	0003      	movs	r3, r0
 8000b08:	2b63      	cmp	r3, #99	; 0x63
 8000b0a:	d9f7      	bls.n	8000afc <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fd82 	bl	800161e <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f000 fb14 	bl	8001148 <HAL_Delay>
  uint32_t	id;
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx Init Begin...\r\n");
  #endif
  id=W25qxx_ReadID();
 8000b20:	f7ff fec4 	bl	80008ac <W25qxx_ReadID>
 8000b24:	0003      	movs	r3, r0
 8000b26:	607b      	str	r3, [r7, #4]
	
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx ID:0x%X\r\n", id);
  #endif
  switch(id & 0x000000FF)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	3b11      	subs	r3, #17
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d84d      	bhi.n	8000bd0 <W25qxx_Init+0xe4>
 8000b34:	009a      	lsls	r2, r3, #2
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <W25qxx_Init+0x170>)
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	469f      	mov	pc, r3
  {
		case 0x20:	// 	w25q512
			w25qxx.ID=W25Q512;
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b40:	220a      	movs	r2, #10
 8000b42:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8000b44:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	00d2      	lsls	r2, r2, #3
 8000b4a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8000b4c:	e046      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x19:	// 	w25q256
			w25qxx.ID=W25Q256;
 8000b4e:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b50:	2209      	movs	r2, #9
 8000b52:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8000b54:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8000b5c:	e03e      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x18:	// 	w25q128
			w25qxx.ID=W25Q128;
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8000b64:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	0052      	lsls	r2, r2, #1
 8000b6a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8000b6c:	e036      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x17:	//	w25q64
			w25qxx.ID=W25Q64;
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8000b74:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8000b7a:	e02f      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x16:	//	w25q32
			w25qxx.ID=W25Q32;
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b7e:	2206      	movs	r2, #6
 8000b80:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8000b88:	e028      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x15:	//	w25q16
			w25qxx.ID=W25Q16;
 8000b8a:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8000b90:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b92:	2220      	movs	r2, #32
 8000b94:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8000b96:	e021      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x14:	//	w25q80
			w25qxx.ID=W25Q80;
 8000b98:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <W25qxx_Init+0x16c>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <W25qxx_Init+0x16c>)
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8000ba4:	e01a      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x13:	//	w25q40
			w25qxx.ID=W25Q40;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <W25qxx_Init+0x16c>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bae:	2208      	movs	r2, #8
 8000bb0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8000bb2:	e013      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x12:	//	w25q20
			w25qxx.ID=W25Q20;
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8000bc0:	e00c      	b.n	8000bdc <W25qxx_Init+0xf0>
		case 0x11:	//	w25q10
			w25qxx.ID=W25Q10;
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8000bce:	e005      	b.n	8000bdc <W25qxx_Init+0xf0>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bd2:	2227      	movs	r2, #39	; 0x27
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	5499      	strb	r1, [r3, r2]
			return false;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e038      	b.n	8000c4e <W25qxx_Init+0x162>
				
	}		
	w25qxx.PageSize=256;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <W25qxx_Init+0x16c>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	0152      	lsls	r2, r2, #5
 8000bea:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	011a      	lsls	r2, r3, #4
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bf4:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <W25qxx_Init+0x16c>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	435a      	muls	r2, r3
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c02:	895b      	ldrh	r3, [r3, #10]
 8000c04:	0019      	movs	r1, r3
 8000c06:	0010      	movs	r0, r2
 8000c08:	f7ff fa7e 	bl	8000108 <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	001a      	movs	r2, r3
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c12:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	011a      	lsls	r2, r3, #4
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c1c:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	4353      	muls	r3, r2
 8000c28:	0a9a      	lsrs	r2, r3, #10
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c2c:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 8000c2e:	f7ff fe7b 	bl	8000928 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fed4 	bl	80009e0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fed1 	bl	80009e0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f7ff fece 	bl	80009e0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <W25qxx_Init+0x16c>)
 8000c46:	2227      	movs	r2, #39	; 0x27
 8000c48:	2100      	movs	r1, #0
 8000c4a:	5499      	strb	r1, [r3, r2]
	return true;
 8000c4c:	2301      	movs	r3, #1
}	
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	2000008c 	.word	0x2000008c
 8000c5c:	08002eb8 	.word	0x08002eb8

08000c60 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <W25qxx_SectorToPage+0x28>)
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	435a      	muls	r2, r3
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <W25qxx_SectorToPage+0x28>)
 8000c72:	895b      	ldrh	r3, [r3, #10]
 8000c74:	0019      	movs	r1, r3
 8000c76:	0010      	movs	r0, r2
 8000c78:	f7ff fa46 	bl	8000108 <__udivsi3>
 8000c7c:	0003      	movs	r3, r0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000008c 	.word	0x2000008c

08000c8c <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000c9a:	e002      	b.n	8000ca2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 fa53 	bl	8001148 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000ca2:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000ca4:	2227      	movs	r2, #39	; 0x27
 8000ca6:	5c9b      	ldrb	r3, [r3, r2]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d0f7      	beq.n	8000c9c <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000cae:	2227      	movs	r2, #39	; 0x27
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	5499      	strb	r1, [r3, r2]
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000cbc:	8952      	ldrh	r2, [r2, #10]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d802      	bhi.n	8000cc8 <W25qxx_WritePage+0x3c>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000cca:	895b      	ldrh	r3, [r3, #10]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	18d3      	adds	r3, r2, r3
 8000cda:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000cdc:	8952      	ldrh	r2, [r2, #10]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d905      	bls.n	8000cee <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000ce4:	895b      	ldrh	r3, [r3, #10]
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8000cee:	f7ff fecf 	bl	8000a90 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8000cf2:	f7ff fe5b 	bl	80009ac <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fc8d 	bl	800161e <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fdb9 	bl	800087c <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000d0c:	895b      	ldrh	r3, [r3, #10]
 8000d0e:	001a      	movs	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4353      	muls	r3, r2
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	18d3      	adds	r3, r2, r3
 8000d18:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d905      	bls.n	8000d2e <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	0e1b      	lsrs	r3, r3, #24
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fda7 	bl	800087c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0c1b      	lsrs	r3, r3, #16
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fda1 	bl	800087c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fd9b 	bl	800087c <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fd96 	bl	800087c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	68f9      	ldr	r1, [r7, #12]
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <W25qxx_WritePage+0x100>)
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	f001 fac3 	bl	80022e4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	2201      	movs	r2, #1
 8000d64:	2110      	movs	r1, #16
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 fc59 	bl	800161e <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000d6c:	f7ff fe90 	bl	8000a90 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 f9e9 	bl	8001148 <HAL_Delay>
	w25qxx.Lock=0;
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <W25qxx_WritePage+0xfc>)
 8000d78:	2227      	movs	r2, #39	; 0x27
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	5499      	strb	r1, [r3, r2]
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	2000008c 	.word	0x2000008c
 8000d8c:	2000002c 	.word	0x2000002c

08000d90 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d802      	bhi.n	8000dae <W25qxx_WriteSector+0x1e>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d245      	bcs.n	8000e4a <W25qxx_WriteSector+0xba>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d905      	bls.n	8000dd8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e001      	b.n	8000ddc <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff ff3e 	bl	8000c60 <W25qxx_SectorToPage>
 8000de4:	0004      	movs	r4, r0
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000de8:	895b      	ldrh	r3, [r3, #10]
 8000dea:	0019      	movs	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff f98b 	bl	8000108 <__udivsi3>
 8000df2:	0003      	movs	r3, r0
 8000df4:	18e3      	adds	r3, r4, r3
 8000df6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000dfa:	895b      	ldrh	r3, [r3, #10]
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fa06 	bl	8000214 <__aeabi_uidivmod>
 8000e08:	000b      	movs	r3, r1
 8000e0a:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	69f9      	ldr	r1, [r7, #28]
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ff3a 	bl	8000c8c <W25qxx_WritePage>
		StartPage++;
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000e20:	895b      	ldrh	r3, [r3, #10]
 8000e22:	001a      	movs	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	1a9a      	subs	r2, r3, r2
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	18d3      	adds	r3, r2, r3
 8000e2c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <W25qxx_WriteSector+0xc4>)
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	001a      	movs	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	18d3      	adds	r3, r2, r3
 8000e3c:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	dce1      	bgt.n	8000e0c <W25qxx_WriteSector+0x7c>
 8000e48:	e000      	b.n	8000e4c <W25qxx_WriteSector+0xbc>
		return;
 8000e4a:	46c0      	nop			; (mov r8, r8)
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b009      	add	sp, #36	; 0x24
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	2000008c 	.word	0x2000008c

08000e58 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000e66:	e002      	b.n	8000e6e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 f96d 	bl	8001148 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000e70:	2227      	movs	r2, #39	; 0x27
 8000e72:	5c9b      	ldrb	r3, [r3, r2]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d0f7      	beq.n	8000e68 <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000e7a:	2227      	movs	r2, #39	; 0x27
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	5499      	strb	r1, [r3, r2]
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000e82:	895b      	ldrh	r3, [r3, #10]
 8000e84:	001a      	movs	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <W25qxx_ReadPage+0x3a>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000e94:	895b      	ldrh	r3, [r3, #10]
 8000e96:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000ea0:	8952      	ldrh	r2, [r2, #10]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d905      	bls.n	8000eb2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000ea8:	895b      	ldrh	r3, [r3, #10]
 8000eaa:	001a      	movs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000eb4:	895b      	ldrh	r3, [r3, #10]
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4353      	muls	r3, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 fba7 	bl	800161e <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8000ed0:	200b      	movs	r0, #11
 8000ed2:	f7ff fcd3 	bl	800087c <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d905      	bls.n	8000eea <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0e1b      	lsrs	r3, r3, #24
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff fcc9 	bl	800087c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fcc3 	bl	800087c <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fcbd 	bl	800087c <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff fcb8 	bl	800087c <W25qxx_Spi>
	W25qxx_Spi(0);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fcb5 	bl	800087c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	68f9      	ldr	r1, [r7, #12]
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <W25qxx_ReadPage+0xf0>)
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	f001 fb40 	bl	80025a0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f20:	23a0      	movs	r3, #160	; 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fb78 	bl	800161e <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 f90a 	bl	8001148 <HAL_Delay>
	w25qxx.Lock=0;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <W25qxx_ReadPage+0xec>)
 8000f36:	2227      	movs	r2, #39	; 0x27
 8000f38:	2100      	movs	r1, #0
 8000f3a:	5499      	strb	r1, [r3, r2]
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000008c 	.word	0x2000008c
 8000f48:	2000002c 	.word	0x2000002c

08000f4c <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d802      	bhi.n	8000f6a <W25qxx_ReadSector+0x1e>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d245      	bcs.n	8001006 <W25qxx_ReadSector+0xba>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	18d2      	adds	r2, r2, r3
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d905      	bls.n	8000f94 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	e001      	b.n	8000f98 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff fe60 	bl	8000c60 <W25qxx_SectorToPage>
 8000fa0:	0004      	movs	r4, r0
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000fa4:	895b      	ldrh	r3, [r3, #10]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff f8ad 	bl	8000108 <__udivsi3>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	18e3      	adds	r3, r4, r3
 8000fb2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	001a      	movs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff f928 	bl	8000214 <__aeabi_uidivmod>
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	69f9      	ldr	r1, [r7, #28]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff ff42 	bl	8000e58 <W25qxx_ReadPage>
		StartPage++;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000fdc:	895b      	ldrh	r3, [r3, #10]
 8000fde:	001a      	movs	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	1a9a      	subs	r2, r3, r2
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <W25qxx_ReadSector+0xc4>)
 8000fec:	895b      	ldrh	r3, [r3, #10]
 8000fee:	001a      	movs	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	18d3      	adds	r3, r2, r3
 8000ff8:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dce1      	bgt.n	8000fc8 <W25qxx_ReadSector+0x7c>
 8001004:	e000      	b.n	8001008 <W25qxx_ReadSector+0xbc>
		return;
 8001006:	46c0      	nop			; (mov r8, r8)
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001008:	46bd      	mov	sp, r7
 800100a:	b009      	add	sp, #36	; 0x24
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	2000008c 	.word	0x2000008c

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff fc2b 	bl	8000872 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f001 fee5 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fa2f 	bl	80004a8 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001058:	08002f08 	.word	0x08002f08
  ldr r2, =_sbss
 800105c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001060:	200000bc 	.word	0x200000bc

08001064 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_COMP_IRQHandler>
	...

08001068 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x3c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Init+0x3c>)
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f811 	bl	80010a8 <HAL_InitTick>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d003      	beq.n	8001092 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e001      	b.n	8001096 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001092:	f7ff fb7f 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_InitTick+0x5c>)
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	0019      	movs	r1, r3
 80010ba:	23fa      	movs	r3, #250	; 0xfa
 80010bc:	0098      	lsls	r0, r3, #2
 80010be:	f7ff f823 	bl	8000108 <__udivsi3>
 80010c2:	0003      	movs	r3, r0
 80010c4:	0019      	movs	r1, r3
 80010c6:	0020      	movs	r0, r4
 80010c8:	f7ff f81e 	bl	8000108 <__udivsi3>
 80010cc:	0003      	movs	r3, r0
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 f905 	bl	80012de <HAL_SYSTICK_Config>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d001      	beq.n	80010dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00f      	b.n	80010fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d80b      	bhi.n	80010fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 f8e2 	bl	80012b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_InitTick+0x64>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	20000004 	.word	0x20000004
 8001108:	2000000c 	.word	0x2000000c
 800110c:	20000008 	.word	0x20000008

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	18d2      	adds	r2, r2, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_IncTick+0x20>)
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	2000000c 	.word	0x2000000c
 8001130:	200000b8 	.word	0x200000b8

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	200000b8 	.word	0x200000b8

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	001a      	movs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	189b      	adds	r3, r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	2000000c 	.word	0x2000000c

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	0002      	movs	r2, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b7f      	cmp	r3, #127	; 0x7f
 80011a4:	d828      	bhi.n	80011f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <__NVIC_SetPriority+0xd4>)
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	33c0      	adds	r3, #192	; 0xc0
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	589b      	ldr	r3, [r3, r2]
 80011b6:	1dfa      	adds	r2, r7, #7
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	0011      	movs	r1, r2
 80011bc:	2203      	movs	r2, #3
 80011be:	400a      	ands	r2, r1
 80011c0:	00d2      	lsls	r2, r2, #3
 80011c2:	21ff      	movs	r1, #255	; 0xff
 80011c4:	4091      	lsls	r1, r2
 80011c6:	000a      	movs	r2, r1
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	401a      	ands	r2, r3
 80011cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	22ff      	movs	r2, #255	; 0xff
 80011d4:	401a      	ands	r2, r3
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	2303      	movs	r3, #3
 80011de:	4003      	ands	r3, r0
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <__NVIC_SetPriority+0xd4>)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	430a      	orrs	r2, r1
 80011f0:	33c0      	adds	r3, #192	; 0xc0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011f6:	e031      	b.n	800125c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <__NVIC_SetPriority+0xd8>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0019      	movs	r1, r3
 8001200:	230f      	movs	r3, #15
 8001202:	400b      	ands	r3, r1
 8001204:	3b08      	subs	r3, #8
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3306      	adds	r3, #6
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1dfa      	adds	r2, r7, #7
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	0011      	movs	r1, r2
 8001218:	2203      	movs	r2, #3
 800121a:	400a      	ands	r2, r1
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	21ff      	movs	r1, #255	; 0xff
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	43d2      	mvns	r2, r2
 8001226:	401a      	ands	r2, r3
 8001228:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	401a      	ands	r2, r3
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	2303      	movs	r3, #3
 800123a:	4003      	ands	r3, r0
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <__NVIC_SetPriority+0xd8>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	001c      	movs	r4, r3
 8001248:	230f      	movs	r3, #15
 800124a:	4023      	ands	r3, r4
 800124c:	3b08      	subs	r3, #8
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	430a      	orrs	r2, r1
 8001252:	3306      	adds	r3, #6
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	18c3      	adds	r3, r0, r3
 8001258:	3304      	adds	r3, #4
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b003      	add	sp, #12
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	045b      	lsls	r3, r3, #17
 800127c:	429a      	cmp	r2, r3
 800127e:	d301      	bcc.n	8001284 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001280:	2301      	movs	r3, #1
 8001282:	e010      	b.n	80012a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <SysTick_Config+0x44>)
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	3a01      	subs	r2, #1
 800128a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128c:	2301      	movs	r3, #1
 800128e:	425b      	negs	r3, r3
 8001290:	2103      	movs	r1, #3
 8001292:	0018      	movs	r0, r3
 8001294:	f7ff ff7c 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x44>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x44>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	210f      	movs	r1, #15
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff5d 	bl	8001190 <__NVIC_SetPriority>
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ffbf 	bl	800126c <SysTick_Config>
 80012ee:	0003      	movs	r3, r0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800130e:	e14f      	b.n	80015b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4091      	lsls	r1, r2
 800131a:	000a      	movs	r2, r1
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d100      	bne.n	8001328 <HAL_GPIO_Init+0x30>
 8001326:	e140      	b.n	80015aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
 8001330:	2b01      	cmp	r3, #1
 8001332:	d005      	beq.n	8001340 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800133c:	2b02      	cmp	r3, #2
 800133e:	d130      	bne.n	80013a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	409a      	lsls	r2, r3
 800134e:	0013      	movs	r3, r2
 8001350:	43da      	mvns	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	409a      	lsls	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001376:	2201      	movs	r2, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	2201      	movs	r2, #1
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d017      	beq.n	80013de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d123      	bne.n	8001432 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	58d3      	ldr	r3, [r2, r3]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2207      	movs	r2, #7
 80013fc:	4013      	ands	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2107      	movs	r1, #7
 8001416:	400b      	ands	r3, r1
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	6939      	ldr	r1, [r7, #16]
 8001430:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	401a      	ands	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	029b      	lsls	r3, r3, #10
 800146e:	4013      	ands	r3, r2
 8001470:	d100      	bne.n	8001474 <HAL_GPIO_Init+0x17c>
 8001472:	e09a      	b.n	80015aa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 800147a:	2101      	movs	r1, #1
 800147c:	430a      	orrs	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x2d4>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	589b      	ldr	r3, [r3, r2]
 800148c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	43da      	mvns	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x1ea>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a47      	ldr	r2, [pc, #284]	; (80015d0 <HAL_GPIO_Init+0x2d8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x1e6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <HAL_GPIO_Init+0x2dc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x1e2>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <HAL_GPIO_Init+0x2e0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x1de>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a44      	ldr	r2, [pc, #272]	; (80015dc <HAL_GPIO_Init+0x2e4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x1da>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014e2:	2300      	movs	r3, #0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	2103      	movs	r1, #3
 80014e8:	400a      	ands	r2, r1
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	; (80015cc <HAL_GPIO_Init+0x2d4>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43da      	mvns	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	035b      	lsls	r3, r3, #13
 800151a:	4013      	ands	r3, r2
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43da      	mvns	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	039b      	lsls	r3, r3, #14
 8001544:	4013      	ands	r3, r2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43da      	mvns	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	4013      	ands	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	40da      	lsrs	r2, r3
 80015b8:	1e13      	subs	r3, r2, #0
 80015ba:	d000      	beq.n	80015be <HAL_GPIO_Init+0x2c6>
 80015bc:	e6a8      	b.n	8001310 <HAL_GPIO_Init+0x18>
  }
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b006      	add	sp, #24
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	50000400 	.word	0x50000400
 80015d4:	50000800 	.word	0x50000800
 80015d8:	50000c00 	.word	0x50000c00
 80015dc:	50001c00 	.word	0x50001c00
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	000a      	movs	r2, r1
 80015ee:	1cbb      	adds	r3, r7, #2
 80015f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	1cba      	adds	r2, r7, #2
 80015f8:	8812      	ldrh	r2, [r2, #0]
 80015fa:	4013      	ands	r3, r2
 80015fc:	d004      	beq.n	8001608 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015fe:	230f      	movs	r3, #15
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e003      	b.n	8001610 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001608:	230f      	movs	r3, #15
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b004      	add	sp, #16
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	0008      	movs	r0, r1
 8001628:	0011      	movs	r1, r2
 800162a:	1cbb      	adds	r3, r7, #2
 800162c:	1c02      	adds	r2, r0, #0
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	1c7b      	adds	r3, r7, #1
 8001632:	1c0a      	adds	r2, r1, #0
 8001634:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001636:	1c7b      	adds	r3, r7, #1
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	1cbb      	adds	r3, r7, #2
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001646:	e003      	b.n	8001650 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	881a      	ldrh	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f000 fbaf 	bl	8001dca <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4bcf      	ldr	r3, [pc, #828]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	220c      	movs	r2, #12
 8001672:	4013      	ands	r3, r2
 8001674:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001676:	4bcd      	ldr	r3, [pc, #820]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	4013      	ands	r3, r2
 8001680:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x36>
 800168c:	e07e      	b.n	800178c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d007      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d112      	bne.n	80016c0 <HAL_RCC_OscConfig+0x68>
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d10d      	bne.n	80016c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4bc1      	ldr	r3, [pc, #772]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	029b      	lsls	r3, r3, #10
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5a>
 80016b0:	e06b      	b.n	800178a <HAL_RCC_OscConfig+0x132>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d167      	bne.n	800178a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f000 fb85 	bl	8001dca <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x84>
 80016cc:	4bb7      	ldr	r3, [pc, #732]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4bb6      	ldr	r3, [pc, #728]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0249      	lsls	r1, r1, #9
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e027      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	23a0      	movs	r3, #160	; 0xa0
 80016e2:	02db      	lsls	r3, r3, #11
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10e      	bne.n	8001706 <HAL_RCC_OscConfig+0xae>
 80016e8:	4bb0      	ldr	r3, [pc, #704]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4baf      	ldr	r3, [pc, #700]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	02c9      	lsls	r1, r1, #11
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	4bad      	ldr	r3, [pc, #692]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4bac      	ldr	r3, [pc, #688]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0249      	lsls	r1, r1, #9
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e012      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 8001706:	4ba9      	ldr	r3, [pc, #676]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4ba8      	ldr	r3, [pc, #672]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 800170c:	49a8      	ldr	r1, [pc, #672]	; (80019b0 <HAL_RCC_OscConfig+0x358>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	4ba6      	ldr	r3, [pc, #664]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4013      	ands	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4ba1      	ldr	r3, [pc, #644]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001726:	49a3      	ldr	r1, [pc, #652]	; (80019b4 <HAL_RCC_OscConfig+0x35c>)
 8001728:	400a      	ands	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d015      	beq.n	8001760 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fcfe 	bl	8001134 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173c:	e009      	b.n	8001752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173e:	f7ff fcf9 	bl	8001134 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d902      	bls.n	8001752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	f000 fb3c 	bl	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001752:	4b96      	ldr	r3, [pc, #600]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d0ef      	beq.n	800173e <HAL_RCC_OscConfig+0xe6>
 800175e:	e015      	b.n	800178c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fce8 	bl	8001134 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176a:	f7ff fce3 	bl	8001134 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b64      	cmp	r3, #100	; 0x64
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e326      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800177c:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	4013      	ands	r3, r2
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x112>
 8001788:	e000      	b.n	800178c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x140>
 8001796:	e08b      	b.n	80018b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d13e      	bne.n	8001828 <HAL_RCC_OscConfig+0x1d0>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d13b      	bne.n	8001828 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017b0:	4b7e      	ldr	r3, [pc, #504]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	4013      	ands	r3, r2
 80017b8:	d004      	beq.n	80017c4 <HAL_RCC_OscConfig+0x16c>
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e302      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a7b      	ldr	r2, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x360>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	021a      	lsls	r2, r3, #8
 80017d4:	4b75      	ldr	r3, [pc, #468]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2209      	movs	r2, #9
 80017e0:	4393      	bics	r3, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	4b71      	ldr	r3, [pc, #452]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ec:	f000 fc40 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 80017f0:	0001      	movs	r1, r0
 80017f2:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	220f      	movs	r2, #15
 80017fa:	4013      	ands	r3, r2
 80017fc:	4a6f      	ldr	r2, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x364>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	000a      	movs	r2, r1
 8001802:	40da      	lsrs	r2, r3
 8001804:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <HAL_RCC_OscConfig+0x368>)
 8001806:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001808:	4b6e      	ldr	r3, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x36c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2513      	movs	r5, #19
 800180e:	197c      	adds	r4, r7, r5
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff fc49 	bl	80010a8 <HAL_InitTick>
 8001816:	0003      	movs	r3, r0
 8001818:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800181a:	197b      	adds	r3, r7, r5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d046      	beq.n	80018b0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001822:	197b      	adds	r3, r7, r5
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	e2d0      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d027      	beq.n	800187e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2209      	movs	r2, #9
 8001834:	4393      	bics	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc78 	bl	8001134 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fc73 	bl	8001134 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e2b6      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d0f1      	beq.n	800184a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a53      	ldr	r2, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x360>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	021a      	lsls	r2, r3, #8
 8001876:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	e018      	b.n	80018b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001884:	2101      	movs	r1, #1
 8001886:	438a      	bics	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fc53 	bl	8001134 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fc4e 	bl	8001134 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e291      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2204      	movs	r2, #4
 80018ac:	4013      	ands	r3, r2
 80018ae:	d1f1      	bne.n	8001894 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2210      	movs	r2, #16
 80018b6:	4013      	ands	r3, r2
 80018b8:	d100      	bne.n	80018bc <HAL_RCC_OscConfig+0x264>
 80018ba:	e0a1      	b.n	8001a00 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d140      	bne.n	8001944 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x282>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e277      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x370>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	0a19      	lsrs	r1, r3, #8
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	061a      	lsls	r2, r3, #24
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80018fe:	430a      	orrs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	0b5b      	lsrs	r3, r3, #13
 8001908:	3301      	adds	r3, #1
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	0212      	lsls	r2, r2, #8
 800190e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	210f      	movs	r1, #15
 8001918:	400b      	ands	r3, r1
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <HAL_RCC_OscConfig+0x364>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x368>)
 8001922:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_OscConfig+0x36c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2513      	movs	r5, #19
 800192a:	197c      	adds	r4, r7, r5
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff fbbb 	bl	80010a8 <HAL_InitTick>
 8001932:	0003      	movs	r3, r0
 8001934:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001936:	197b      	adds	r3, r7, r5
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d060      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800193e:	197b      	adds	r3, r7, r5
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	e242      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03f      	beq.n	80019cc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	0049      	lsls	r1, r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fbeb 	bl	8001134 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001964:	f7ff fbe6 	bl	8001134 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e229      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x370>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	0a19      	lsrs	r1, r3, #8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	061a      	lsls	r2, r3, #24
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <HAL_RCC_OscConfig+0x354>)
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	e029      	b.n	8001a00 <HAL_RCC_OscConfig+0x3a8>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	fffeffff 	.word	0xfffeffff
 80019b4:	fffbffff 	.word	0xfffbffff
 80019b8:	ffffe0ff 	.word	0xffffe0ff
 80019bc:	08002e9c 	.word	0x08002e9c
 80019c0:	20000004 	.word	0x20000004
 80019c4:	20000008 	.word	0x20000008
 80019c8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019cc:	4bbd      	ldr	r3, [pc, #756]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4bbc      	ldr	r3, [pc, #752]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 80019d2:	49bd      	ldr	r1, [pc, #756]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fbac 	bl	8001134 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e2:	f7ff fba7 	bl	8001134 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1ea      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019f4:	4bb3      	ldr	r3, [pc, #716]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2208      	movs	r2, #8
 8001a06:	4013      	ands	r3, r2
 8001a08:	d036      	beq.n	8001a78 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d019      	beq.n	8001a46 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4bac      	ldr	r3, [pc, #688]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a16:	4bab      	ldr	r3, [pc, #684]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb89 	bl	8001134 <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fb84 	bl	8001134 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1c7      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a3a:	4ba2      	ldr	r3, [pc, #648]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f1      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3d0>
 8001a44:	e018      	b.n	8001a78 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b9f      	ldr	r3, [pc, #636]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a4a:	4b9e      	ldr	r3, [pc, #632]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	438a      	bics	r2, r1
 8001a50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb6f 	bl	8001134 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb6a 	bl	8001134 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1ad      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a6e:	4b95      	ldr	r3, [pc, #596]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	d1f1      	bne.n	8001a5c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d100      	bne.n	8001a84 <HAL_RCC_OscConfig+0x42c>
 8001a82:	e0ae      	b.n	8001be2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a84:	2027      	movs	r0, #39	; 0x27
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8c:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	055b      	lsls	r3, r3, #21
 8001a94:	4013      	ands	r3, r2
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b8a      	ldr	r3, [pc, #552]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	0549      	lsls	r1, r1, #21
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b87      	ldr	r3, [pc, #540]	; (8001ccc <HAL_RCC_OscConfig+0x674>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d11a      	bne.n	8001aee <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab8:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <HAL_RCC_OscConfig+0x674>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b83      	ldr	r3, [pc, #524]	; (8001ccc <HAL_RCC_OscConfig+0x674>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	0049      	lsls	r1, r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fb35 	bl	8001134 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad0:	f7ff fb30 	bl	8001134 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e173      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x674>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4b2>
 8001afa:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001afe:	4b71      	ldr	r3, [pc, #452]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0049      	lsls	r1, r1, #1
 8001b04:	430a      	orrs	r2, r1
 8001b06:	651a      	str	r2, [r3, #80]	; 0x50
 8001b08:	e031      	b.n	8001b6e <HAL_RCC_OscConfig+0x516>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d4>
 8001b12:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b16:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b18:	496b      	ldr	r1, [pc, #428]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b1e:	4b69      	ldr	r3, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b22:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b24:	496a      	ldr	r1, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x678>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	651a      	str	r2, [r3, #80]	; 0x50
 8001b2a:	e020      	b.n	8001b6e <HAL_RCC_OscConfig+0x516>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	23a0      	movs	r3, #160	; 0xa0
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d10e      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4fe>
 8001b38:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	00c9      	lsls	r1, r1, #3
 8001b42:	430a      	orrs	r2, r1
 8001b44:	651a      	str	r2, [r3, #80]	; 0x50
 8001b46:	4b5f      	ldr	r3, [pc, #380]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	0049      	lsls	r1, r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	651a      	str	r2, [r3, #80]	; 0x50
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x516>
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b5c:	495a      	ldr	r1, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	651a      	str	r2, [r3, #80]	; 0x50
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b68:	4959      	ldr	r1, [pc, #356]	; (8001cd0 <HAL_RCC_OscConfig+0x678>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fadd 	bl	8001134 <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7e:	e009      	b.n	8001b94 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7ff fad8 	bl	8001134 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e11a      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b94:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d0ef      	beq.n	8001b80 <HAL_RCC_OscConfig+0x528>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fac7 	bl	8001134 <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001baa:	e009      	b.n	8001bc0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff fac2 	bl	8001134 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a47      	ldr	r2, [pc, #284]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e104      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d1ef      	bne.n	8001bac <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bcc:	2327      	movs	r3, #39	; 0x27
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001bdc:	493e      	ldr	r1, [pc, #248]	; (8001cd8 <HAL_RCC_OscConfig+0x680>)
 8001bde:	400a      	ands	r2, r1
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2220      	movs	r2, #32
 8001be8:	4013      	ands	r3, r2
 8001bea:	d049      	beq.n	8001c80 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d026      	beq.n	8001c42 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c0c:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0189      	lsls	r1, r1, #6
 8001c16:	430a      	orrs	r2, r1
 8001c18:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fa8b 	bl	8001134 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c24:	f7ff fa86 	bl	8001134 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0c9      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d0f1      	beq.n	8001c24 <HAL_RCC_OscConfig+0x5cc>
 8001c40:	e01e      	b.n	8001c80 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	438a      	bics	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001c54:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <HAL_RCC_OscConfig+0x688>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa6b 	bl	8001134 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c64:	f7ff fa66 	bl	8001134 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0a9      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d1f1      	bne.n	8001c64 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x632>
 8001c88:	e09e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d100      	bne.n	8001c92 <HAL_RCC_OscConfig+0x63a>
 8001c90:	e077      	b.n	8001d82 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d158      	bne.n	8001d4c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_OscConfig+0x66c>)
 8001ca0:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fa45 	bl	8001134 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cae:	e01b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff fa40 	bl	8001134 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d914      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e083      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	fffffeff 	.word	0xfffffeff
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	fffffbff 	.word	0xfffffbff
 8001cd4:	00001388 	.word	0x00001388
 8001cd8:	efffffff 	.word	0xefffffff
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	ffffdfff 	.word	0xffffdfff
 8001ce4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	049b      	lsls	r3, r3, #18
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d1dd      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf4:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a37      	ldr	r2, [pc, #220]	; (8001dd8 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0449      	lsls	r1, r1, #17
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff fa07 	bl	8001134 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fa02 	bl	8001134 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e045      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	049b      	lsls	r3, r3, #18
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x6d4>
 8001d4a:	e03d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d52:	4922      	ldr	r1, [pc, #136]	; (8001ddc <HAL_RCC_OscConfig+0x784>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f9ec 	bl	8001134 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff f9e7 	bl	8001134 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e02a      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	049b      	lsls	r3, r3, #18
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x70a>
 8001d80:	e022      	b.n	8001dc8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01d      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_RCC_OscConfig+0x77c>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	025b      	lsls	r3, r3, #9
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10f      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	23f0      	movs	r3, #240	; 0xf0
 8001da8:	039b      	lsls	r3, r3, #14
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b00a      	add	sp, #40	; 0x28
 8001dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	ff02ffff 	.word	0xff02ffff
 8001ddc:	feffffff 	.word	0xfeffffff

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e128      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b96      	ldr	r3, [pc, #600]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d91e      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b93      	ldr	r3, [pc, #588]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4b90      	ldr	r3, [pc, #576]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e14:	f7ff f98e 	bl	8001134 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1e:	f7ff f989 	bl	8001134 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <HAL_RCC_ClockConfig+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e109      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b87      	ldr	r3, [pc, #540]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4a:	4b83      	ldr	r3, [pc, #524]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	22f0      	movs	r2, #240	; 0xf0
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	d100      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x8a>
 8001e68:	e089      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e72:	4b79      	ldr	r3, [pc, #484]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	029b      	lsls	r3, r3, #10
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d120      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e1      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	049b      	lsls	r3, r3, #18
 8001e92:	4013      	ands	r3, r2
 8001e94:	d114      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0d5      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea2:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0ca      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eb0:	4b69      	ldr	r3, [pc, #420]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0c2      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4393      	bics	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4b62      	ldr	r3, [pc, #392]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed4:	f7ff f92e 	bl	8001134 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d111      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7ff f925 	bl	8001134 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a58      	ldr	r2, [pc, #352]	; (8002054 <HAL_RCC_ClockConfig+0x274>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0a5      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	220c      	movs	r2, #12
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x106>
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d111      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f10:	e009      	b.n	8001f26 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f12:	f7ff f90f 	bl	8001134 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	4a4d      	ldr	r2, [pc, #308]	; (8002054 <HAL_RCC_ClockConfig+0x274>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e08f      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d1ef      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x132>
 8001f32:	e024      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d11b      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3c:	e009      	b.n	8001f52 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3e:	f7ff f8f9 	bl	8001134 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_RCC_ClockConfig+0x274>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e079      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	220c      	movs	r2, #12
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d1ef      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x15e>
 8001f5e:	e00e      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff f8e8 	bl	8001134 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <HAL_RCC_ClockConfig+0x274>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e068      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f74:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	220c      	movs	r2, #12
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7e:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d21e      	bcs.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4393      	bics	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f9e:	f7ff f8c9 	bl	8001134 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff f8c4 	bl	8001134 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	4a28      	ldr	r2, [pc, #160]	; (8002054 <HAL_RCC_ClockConfig+0x274>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e044      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_ClockConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x27c>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <HAL_RCC_ClockConfig+0x280>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	00da      	lsls	r2, r3, #3
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8002004:	430a      	orrs	r2, r1
 8002006:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002008:	f000 f832 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800200c:	0001      	movs	r1, r0
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x278>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	220f      	movs	r2, #15
 8002016:	4013      	ands	r3, r2
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x284>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	000a      	movs	r2, r1
 800201e:	40da      	lsrs	r2, r3
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_ClockConfig+0x288>)
 8002022:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_ClockConfig+0x28c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	250b      	movs	r5, #11
 800202a:	197c      	adds	r4, r7, r5
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff f83b 	bl	80010a8 <HAL_InitTick>
 8002032:	0003      	movs	r3, r0
 8002034:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002036:	197b      	adds	r3, r7, r5
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800203e:	197b      	adds	r3, r7, r5
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	e000      	b.n	8002046 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bdb0      	pop	{r4, r5, r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	40022000 	.word	0x40022000
 8002054:	00001388 	.word	0x00001388
 8002058:	40021000 	.word	0x40021000
 800205c:	fffff8ff 	.word	0xfffff8ff
 8002060:	ffffc7ff 	.word	0xffffc7ff
 8002064:	08002e9c 	.word	0x08002e9c
 8002068:	20000004 	.word	0x20000004
 800206c:	20000008 	.word	0x20000008

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002076:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800207e:	230c      	movs	r3, #12
 8002080:	4013      	ands	r3, r2
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d014      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002086:	d900      	bls.n	800208a <HAL_RCC_GetSysClockFreq+0x1a>
 8002088:	e07b      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x112>
 800208a:	2b04      	cmp	r3, #4
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x24>
 800208e:	2b08      	cmp	r3, #8
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x3a>
 8002092:	e076      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2210      	movs	r2, #16
 800209a:	4013      	ands	r3, r2
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80020a2:	e07c      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a8:	e079      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020ae:	e076      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	0c9a      	lsrs	r2, r3, #18
 80020b4:	230f      	movs	r3, #15
 80020b6:	401a      	ands	r2, r3
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	0d9a      	lsrs	r2, r3, #22
 80020c2:	2303      	movs	r3, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	3301      	adds	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ca:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	4013      	ands	r3, r2
 80020d4:	d01a      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80020e0:	2300      	movs	r3, #0
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	69f9      	ldr	r1, [r7, #28]
 80020e6:	f7fe f8bb 	bl	8000260 <__aeabi_lmul>
 80020ea:	0002      	movs	r2, r0
 80020ec:	000b      	movs	r3, r1
 80020ee:	0010      	movs	r0, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f7fe f88f 	bl	8000220 <__aeabi_uldivmod>
 8002102:	0002      	movs	r2, r0
 8002104:	000b      	movs	r3, r1
 8002106:	0013      	movs	r3, r2
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
 800210a:	e037      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2210      	movs	r2, #16
 8002112:	4013      	ands	r3, r2
 8002114:	d01a      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002120:	2300      	movs	r3, #0
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	f7fe f89b 	bl	8000260 <__aeabi_lmul>
 800212a:	0002      	movs	r2, r0
 800212c:	000b      	movs	r3, r1
 800212e:	0010      	movs	r0, r2
 8002130:	0019      	movs	r1, r3
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f7fe f86f 	bl	8000220 <__aeabi_uldivmod>
 8002142:	0002      	movs	r2, r0
 8002144:	000b      	movs	r3, r1
 8002146:	0013      	movs	r3, r2
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
 800214a:	e017      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	0018      	movs	r0, r3
 8002150:	2300      	movs	r3, #0
 8002152:	0019      	movs	r1, r3
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002156:	2300      	movs	r3, #0
 8002158:	f7fe f882 	bl	8000260 <__aeabi_lmul>
 800215c:	0002      	movs	r2, r0
 800215e:	000b      	movs	r3, r1
 8002160:	0010      	movs	r0, r2
 8002162:	0019      	movs	r1, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	001c      	movs	r4, r3
 8002168:	2300      	movs	r3, #0
 800216a:	001d      	movs	r5, r3
 800216c:	0022      	movs	r2, r4
 800216e:	002b      	movs	r3, r5
 8002170:	f7fe f856 	bl	8000220 <__aeabi_uldivmod>
 8002174:	0002      	movs	r2, r0
 8002176:	000b      	movs	r3, r1
 8002178:	0013      	movs	r3, r2
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002180:	e00d      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	0b5b      	lsrs	r3, r3, #13
 8002188:	2207      	movs	r2, #7
 800218a:	4013      	ands	r3, r2
 800218c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	3301      	adds	r3, #1
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0212      	lsls	r2, r2, #8
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800219c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b00e      	add	sp, #56	; 0x38
 80021a6:	bdb0      	pop	{r4, r5, r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	003d0900 	.word	0x003d0900
 80021b0:	00f42400 	.word	0x00f42400
 80021b4:	007a1200 	.word	0x007a1200
 80021b8:	08002eac 	.word	0x08002eac

080021bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e083      	b.n	80022d6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	2382      	movs	r3, #130	; 0x82
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	429a      	cmp	r2, r3
 80021e0:	d009      	beq.n	80021f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	61da      	str	r2, [r3, #28]
 80021e8:	e005      	b.n	80021f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2251      	movs	r2, #81	; 0x51
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2250      	movs	r2, #80	; 0x50
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f7fe fad2 	bl	80007bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2251      	movs	r2, #81	; 0x51
 800221c:	2102      	movs	r1, #2
 800221e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	2382      	movs	r3, #130	; 0x82
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	401a      	ands	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	2384      	movs	r3, #132	; 0x84
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	400b      	ands	r3, r1
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	400b      	ands	r3, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2102      	movs	r1, #2
 8002258:	400b      	ands	r3, r1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	2101      	movs	r1, #1
 8002262:	400b      	ands	r3, r1
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6999      	ldr	r1, [r3, #24]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	400b      	ands	r3, r1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2138      	movs	r1, #56	; 0x38
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	400b      	ands	r3, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	0011      	movs	r1, r2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	2204      	movs	r2, #4
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	2210      	movs	r2, #16
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <HAL_SPI_Init+0x124>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2251      	movs	r2, #81	; 0x51
 80022d0:	2101      	movs	r1, #1
 80022d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	fffff7ff 	.word	0xfffff7ff

080022e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f4:	231f      	movs	r3, #31
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2250      	movs	r2, #80	; 0x50
 8002300:	5c9b      	ldrb	r3, [r3, r2]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_SPI_Transmit+0x26>
 8002306:	2302      	movs	r3, #2
 8002308:	e145      	b.n	8002596 <HAL_SPI_Transmit+0x2b2>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2250      	movs	r2, #80	; 0x50
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002312:	f7fe ff0f 	bl	8001134 <HAL_GetTick>
 8002316:	0003      	movs	r3, r0
 8002318:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800231a:	2316      	movs	r3, #22
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	1dba      	adds	r2, r7, #6
 8002320:	8812      	ldrh	r2, [r2, #0]
 8002322:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2251      	movs	r2, #81	; 0x51
 8002328:	5c9b      	ldrb	r3, [r3, r2]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d004      	beq.n	800233a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
    goto error;
 8002338:	e126      	b.n	8002588 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_SPI_Transmit+0x64>
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002348:	231f      	movs	r3, #31
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002350:	e11a      	b.n	8002588 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2251      	movs	r2, #81	; 0x51
 8002356:	2103      	movs	r1, #3
 8002358:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1dba      	adds	r2, r7, #6
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1dba      	adds	r2, r7, #6
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	429a      	cmp	r2, r3
 800239e:	d110      	bne.n	80023c2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	438a      	bics	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	01c9      	lsls	r1, r1, #7
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d007      	beq.n	80023e0 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d152      	bne.n	8002492 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_SPI_Transmit+0x11a>
 80023f4:	2316      	movs	r3, #22
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d143      	bne.n	8002486 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002422:	e030      	b.n	8002486 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d112      	bne.n	8002458 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	86da      	strh	r2, [r3, #54]	; 0x36
 8002456:	e016      	b.n	8002486 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002458:	f7fe fe6c 	bl	8001134 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d802      	bhi.n	800246e <HAL_SPI_Transmit+0x18a>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_SPI_Transmit+0x190>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d108      	bne.n	8002486 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2251      	movs	r2, #81	; 0x51
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]
          goto error;
 8002484:	e080      	b.n	8002588 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1c9      	bne.n	8002424 <HAL_SPI_Transmit+0x140>
 8002490:	e053      	b.n	800253a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <HAL_SPI_Transmit+0x1c0>
 800249a:	2316      	movs	r3, #22
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d145      	bne.n	8002530 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024ca:	e031      	b.n	8002530 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d113      	bne.n	8002502 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002500:	e016      	b.n	8002530 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002502:	f7fe fe17 	bl	8001134 <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d802      	bhi.n	8002518 <HAL_SPI_Transmit+0x234>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_SPI_Transmit+0x23a>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2203      	movs	r2, #3
 8002524:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2251      	movs	r2, #81	; 0x51
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
          goto error;
 800252e:	e02b      	b.n	8002588 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1c8      	bne.n	80024cc <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fc1f 	bl	8002d84 <SPI_EndRxTxTransaction>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d002      	beq.n	8002550 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e003      	b.n	8002588 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2251      	movs	r2, #81	; 0x51
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2250      	movs	r2, #80	; 0x50
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b008      	add	sp, #32
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	1dbb      	adds	r3, r7, #6
 80025ae:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025b0:	2117      	movs	r1, #23
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2251      	movs	r2, #81	; 0x51
 80025bc:	5c9b      	ldrb	r3, [r3, r2]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d003      	beq.n	80025cc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80025ca:	e109      	b.n	80027e0 <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	2382      	movs	r3, #130	; 0x82
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d113      	bne.n	8002600 <HAL_SPI_Receive+0x60>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10f      	bne.n	8002600 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2251      	movs	r2, #81	; 0x51
 80025e4:	2104      	movs	r1, #4
 80025e6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025e8:	1dbb      	adds	r3, r7, #6
 80025ea:	881c      	ldrh	r4, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	0023      	movs	r3, r4
 80025f8:	f000 f900 	bl	80027fc <HAL_SPI_TransmitReceive>
 80025fc:	0003      	movs	r3, r0
 80025fe:	e0f6      	b.n	80027ee <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2250      	movs	r2, #80	; 0x50
 8002604:	5c9b      	ldrb	r3, [r3, r2]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_SPI_Receive+0x6e>
 800260a:	2302      	movs	r3, #2
 800260c:	e0ef      	b.n	80027ee <HAL_SPI_Receive+0x24e>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2250      	movs	r2, #80	; 0x50
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002616:	f7fe fd8d 	bl	8001134 <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_SPI_Receive+0x8c>
 8002624:	1dbb      	adds	r3, r7, #6
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d104      	bne.n	8002636 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800262c:	2317      	movs	r3, #23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
    goto error;
 8002634:	e0d4      	b.n	80027e0 <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2251      	movs	r2, #81	; 0x51
 800263a:	2104      	movs	r1, #4
 800263c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1dba      	adds	r2, r7, #6
 800264e:	8812      	ldrh	r2, [r2, #0]
 8002650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1dba      	adds	r2, r7, #6
 8002656:	8812      	ldrh	r2, [r2, #0]
 8002658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	429a      	cmp	r2, r3
 8002682:	d10f      	bne.n	80026a4 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	438a      	bics	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4956      	ldr	r1, [pc, #344]	; (80027f8 <HAL_SPI_Receive+0x258>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d007      	beq.n	80026c2 <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d000      	beq.n	80026cc <HAL_SPI_Receive+0x12c>
 80026ca:	e06c      	b.n	80027a6 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026cc:	e033      	b.n	8002736 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2201      	movs	r2, #1
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d115      	bne.n	8002708 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	001a      	movs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002706:	e016      	b.n	8002736 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002708:	f7fe fd14 	bl	8001134 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d802      	bhi.n	800271e <HAL_SPI_Receive+0x17e>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	d102      	bne.n	8002724 <HAL_SPI_Receive+0x184>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d108      	bne.n	8002736 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002724:	2317      	movs	r3, #23
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2251      	movs	r2, #81	; 0x51
 8002730:	2101      	movs	r1, #1
 8002732:	5499      	strb	r1, [r3, r2]
          goto error;
 8002734:	e054      	b.n	80027e0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1c6      	bne.n	80026ce <HAL_SPI_Receive+0x12e>
 8002740:	e036      	b.n	80027b0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2201      	movs	r2, #1
 800274a:	4013      	ands	r3, r2
 800274c:	2b01      	cmp	r3, #1
 800274e:	d113      	bne.n	8002778 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	b292      	uxth	r2, r2
 800275c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	1c9a      	adds	r2, r3, #2
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002776:	e016      	b.n	80027a6 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002778:	f7fe fcdc 	bl	8001134 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d802      	bhi.n	800278e <HAL_SPI_Receive+0x1ee>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Receive+0x1f4>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d108      	bne.n	80027a6 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2317      	movs	r3, #23
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2203      	movs	r2, #3
 800279a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2251      	movs	r2, #81	; 0x51
 80027a0:	2101      	movs	r1, #1
 80027a2:	5499      	strb	r1, [r3, r2]
          goto error;
 80027a4:	e01c      	b.n	80027e0 <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1c8      	bne.n	8002742 <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fa7a 	bl	8002cb0 <SPI_EndRxTransaction>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80027ce:	2317      	movs	r3, #23
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e003      	b.n	80027e0 <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2251      	movs	r2, #81	; 0x51
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2250      	movs	r2, #80	; 0x50
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80027e8:	2317      	movs	r3, #23
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	781b      	ldrb	r3, [r3, #0]
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b007      	add	sp, #28
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	ffffbfff 	.word	0xffffbfff

080027fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	; 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	001a      	movs	r2, r3
 800280a:	1cbb      	adds	r3, r7, #2
 800280c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800280e:	2301      	movs	r3, #1
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002812:	232b      	movs	r3, #43	; 0x2b
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2250      	movs	r2, #80	; 0x50
 800281e:	5c9b      	ldrb	r3, [r3, r2]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_SPI_TransmitReceive+0x2c>
 8002824:	2302      	movs	r3, #2
 8002826:	e1b0      	b.n	8002b8a <HAL_SPI_TransmitReceive+0x38e>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2250      	movs	r2, #80	; 0x50
 800282c:	2101      	movs	r1, #1
 800282e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002830:	f7fe fc80 	bl	8001134 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002838:	2023      	movs	r0, #35	; 0x23
 800283a:	183b      	adds	r3, r7, r0
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	2151      	movs	r1, #81	; 0x51
 8002840:	5c52      	ldrb	r2, [r2, r1]
 8002842:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800284a:	231a      	movs	r3, #26
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	1cba      	adds	r2, r7, #2
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002854:	183b      	adds	r3, r7, r0
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d011      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x84>
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	2382      	movs	r3, #130	; 0x82
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	429a      	cmp	r2, r3
 8002864:	d107      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x7a>
 800286e:	183b      	adds	r3, r7, r0
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d004      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002876:	232b      	movs	r3, #43	; 0x2b
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
    goto error;
 800287e:	e17d      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x98>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x98>
 800288c:	1cbb      	adds	r3, r7, #2
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002894:	232b      	movs	r3, #43	; 0x2b
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
    goto error;
 800289c:	e16e      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2251      	movs	r2, #81	; 0x51
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d003      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2251      	movs	r2, #81	; 0x51
 80028ae:	2105      	movs	r1, #5
 80028b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1cba      	adds	r2, r7, #2
 80028c2:	8812      	ldrh	r2, [r2, #0]
 80028c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1cba      	adds	r2, r7, #2
 80028ca:	8812      	ldrh	r2, [r2, #0]
 80028cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1cba      	adds	r2, r7, #2
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1cba      	adds	r2, r7, #2
 80028e0:	8812      	ldrh	r2, [r2, #0]
 80028e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2240      	movs	r2, #64	; 0x40
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d007      	beq.n	800290e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	429a      	cmp	r2, r3
 8002918:	d000      	beq.n	800291c <HAL_SPI_TransmitReceive+0x120>
 800291a:	e07f      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x134>
 8002924:	231a      	movs	r3, #26
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d000      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x134>
 800292e:	e06a      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002954:	e057      	b.n	8002a06 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_SPI_TransmitReceive+0x1a0>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_SPI_TransmitReceive+0x1a0>
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d113      	bne.n	800299c <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	881a      	ldrh	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	1c9a      	adds	r2, r3, #2
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d119      	bne.n	80029de <HAL_SPI_TransmitReceive+0x1e2>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	b292      	uxth	r2, r2
 80029c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029da:	2301      	movs	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029de:	f7fe fba9 	bl	8001134 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d80b      	bhi.n	8002a06 <HAL_SPI_TransmitReceive+0x20a>
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	3301      	adds	r3, #1
 80029f2:	d008      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80029f4:	232b      	movs	r3, #43	; 0x2b
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2203      	movs	r2, #3
 80029fa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2251      	movs	r2, #81	; 0x51
 8002a00:	2101      	movs	r1, #1
 8002a02:	5499      	strb	r1, [r3, r2]
        goto error;
 8002a04:	e0ba      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1a2      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x15a>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d19d      	bne.n	8002956 <HAL_SPI_TransmitReceive+0x15a>
 8002a1a:	e083      	b.n	8002b24 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x234>
 8002a24:	231a      	movs	r3, #26
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d000      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x234>
 8002a2e:	e06f      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a56:	e05b      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d11c      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x2a4>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x2a4>
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d114      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d119      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x2e6>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d014      	beq.n	8002ae2 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ae2:	f7fe fb27 	bl	8001134 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d802      	bhi.n	8002af8 <HAL_SPI_TransmitReceive+0x2fc>
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	3301      	adds	r3, #1
 8002af6:	d102      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x302>
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8002afe:	232b      	movs	r3, #43	; 0x2b
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2203      	movs	r2, #3
 8002b04:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2251      	movs	r2, #81	; 0x51
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]
        goto error;
 8002b0e:	e035      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d19e      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x25c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d199      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f92a 	bl	8002d84 <SPI_EndRxTxTransaction>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8002b34:	232b      	movs	r3, #43	; 0x2b
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b42:	e01b      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8002b6a:	232b      	movs	r3, #43	; 0x2b
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e003      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2251      	movs	r2, #81	; 0x51
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2250      	movs	r2, #80	; 0x50
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b84:	232b      	movs	r3, #43	; 0x2b
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b00c      	add	sp, #48	; 0x30
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ba4:	f7fe fac6 	bl	8001134 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bb4:	f7fe fabe 	bl	8001134 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	015b      	lsls	r3, r3, #5
 8002bc2:	0d1b      	lsrs	r3, r3, #20
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	4353      	muls	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bca:	e058      	b.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	d055      	beq.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bd2:	f7fe faaf 	bl	8001134 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d902      	bls.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d142      	bne.n	8002c6e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	21e0      	movs	r1, #224	; 0xe0
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	2382      	movs	r3, #130	; 0x82
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d113      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d005      	beq.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d107      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	019b      	lsls	r3, r3, #6
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d110      	bne.n	8002c5a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	491a      	ldr	r1, [pc, #104]	; (8002cac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	0189      	lsls	r1, r1, #6
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2251      	movs	r2, #81	; 0x51
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2250      	movs	r2, #80	; 0x50
 8002c66:	2100      	movs	r1, #0
 8002c68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e017      	b.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	425a      	negs	r2, r3
 8002c8e:	4153      	adcs	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	001a      	movs	r2, r3
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d197      	bne.n	8002bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b008      	add	sp, #32
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	ffffdfff 	.word	0xffffdfff

08002cb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2382      	movs	r3, #130	; 0x82
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d113      	bne.n	8002cf0 <SPI_EndRxTransaction+0x40>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d005      	beq.n	8002ce0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	438a      	bics	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	2382      	movs	r3, #130	; 0x82
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d12b      	bne.n	8002d54 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d012      	beq.n	8002d2e <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	0013      	movs	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	f7ff ff3d 	bl	8002b94 <SPI_WaitFlagStateUntilTimeout>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d02d      	beq.n	8002d7a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	2220      	movs	r2, #32
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e026      	b.n	8002d7c <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	0013      	movs	r3, r2
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	f7ff ff2a 	bl	8002b94 <SPI_WaitFlagStateUntilTimeout>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d01a      	beq.n	8002d7a <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2220      	movs	r2, #32
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e013      	b.n	8002d7c <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	0013      	movs	r3, r2
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2101      	movs	r1, #1
 8002d62:	f7ff ff17 	bl	8002b94 <SPI_WaitFlagStateUntilTimeout>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d007      	beq.n	8002d7a <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	2220      	movs	r2, #32
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e000      	b.n	8002d7c <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b004      	add	sp, #16
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <SPI_EndRxTxTransaction+0x84>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	491d      	ldr	r1, [pc, #116]	; (8002e0c <SPI_EndRxTxTransaction+0x88>)
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7fd f9b6 	bl	8000108 <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	001a      	movs	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	189b      	adds	r3, r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	2382      	movs	r3, #130	; 0x82
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d112      	bne.n	8002de0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	f7ff fee4 	bl	8002b94 <SPI_WaitFlagStateUntilTimeout>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d016      	beq.n	8002dfe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e00f      	b.n	8002e00 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d0f2      	beq.n	8002de0 <SPI_EndRxTxTransaction+0x5c>
 8002dfa:	e000      	b.n	8002dfe <SPI_EndRxTxTransaction+0x7a>
        break;
 8002dfc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b006      	add	sp, #24
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000004 	.word	0x20000004
 8002e0c:	016e3600 	.word	0x016e3600

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2600      	movs	r6, #0
 8002e14:	4d0c      	ldr	r5, [pc, #48]	; (8002e48 <__libc_init_array+0x38>)
 8002e16:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <__libc_init_array+0x3c>)
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	42a6      	cmp	r6, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	2600      	movs	r6, #0
 8002e22:	f000 f82f 	bl	8002e84 <_init>
 8002e26:	4d0a      	ldr	r5, [pc, #40]	; (8002e50 <__libc_init_array+0x40>)
 8002e28:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <__libc_init_array+0x44>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	42a6      	cmp	r6, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	00b3      	lsls	r3, r6, #2
 8002e36:	58eb      	ldr	r3, [r5, r3]
 8002e38:	4798      	blx	r3
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	00b3      	lsls	r3, r6, #2
 8002e40:	58eb      	ldr	r3, [r5, r3]
 8002e42:	4798      	blx	r3
 8002e44:	3601      	adds	r6, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002f00 	.word	0x08002f00
 8002e4c:	08002f00 	.word	0x08002f00
 8002e50:	08002f00 	.word	0x08002f00
 8002e54:	08002f04 	.word	0x08002f04

08002e58 <memcmp>:
 8002e58:	b530      	push	{r4, r5, lr}
 8002e5a:	2400      	movs	r4, #0
 8002e5c:	3901      	subs	r1, #1
 8002e5e:	42a2      	cmp	r2, r4
 8002e60:	d101      	bne.n	8002e66 <memcmp+0xe>
 8002e62:	2000      	movs	r0, #0
 8002e64:	e005      	b.n	8002e72 <memcmp+0x1a>
 8002e66:	5d03      	ldrb	r3, [r0, r4]
 8002e68:	3401      	adds	r4, #1
 8002e6a:	5d0d      	ldrb	r5, [r1, r4]
 8002e6c:	42ab      	cmp	r3, r5
 8002e6e:	d0f6      	beq.n	8002e5e <memcmp+0x6>
 8002e70:	1b58      	subs	r0, r3, r5
 8002e72:	bd30      	pop	{r4, r5, pc}

08002e74 <memset>:
 8002e74:	0003      	movs	r3, r0
 8002e76:	1882      	adds	r2, r0, r2
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <memset+0xa>
 8002e7c:	4770      	bx	lr
 8002e7e:	7019      	strb	r1, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	e7f9      	b.n	8002e78 <memset+0x4>

08002e84 <_init>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr

08002e90 <_fini>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr
